import 'package:flutter/material.dart';

void main() =>
    runApp(const MyApp());


class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(             //the first widget in our app
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // Try running your application with "flutter run". You'll see the
        // application has a blue toolbar. Then, without quitting the app, try
        // changing the primarySwatch below to Colors.green and then invoke
        // "hot reload" (press "r" in the console where you ran "flutter run",
        // or simply save your changes to "hot reload" in a Flutter IDE).
        // Notice that the counter didn't reset back to zero; the application
        // is not restarted.
        primarySwatch: Colors.orange,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {


  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        title: const Text('Flutter Button'),
      ),
      body: Container(
        margin: EdgeInsets.all(120),
        padding: EdgeInsets.all(40),
        child: Column(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const SizedBox(width: 30),
                ElevatedButton(
                    onPressed:() {
                      showDialog(
                          context: context,
                          builder: (ctx)=> const AlertDialog(
                              title: Text('You clicked on the Phone Button')
                          ));
                    },
                    child:  Text('Phone',)
                ),
                const SizedBox( width:20),
                ElevatedButton.icon(
                    onPressed: (){
                      showDialog(
                          context: context,
                          builder: (ctx)=> const AlertDialog(
                              title: Text('You clicked on the Phone Button')
                          ));
                    },
                    icon: const Icon(
                        Icons.phone
                    ),
                    label: const Text('Phone'))
              ],
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const SizedBox(width: 30),
                TextButton(
                    onPressed:() {
                      showDialog(
                          context: context,
                          builder: (ctx)=> const AlertDialog(
                              title: Text('You clicked on the Mail Button')
                          ));
                    },
                    child: const Text('Mail')
                ),
                const SizedBox( width:50),
                TextButton.icon(
                    onPressed: (){
                      showDialog(
                          context: context,
                          builder: (ctx)=> const AlertDialog(
                              title: Text('You clicked on the Mail Button')
                          ));
                    },
                    icon: const Icon(
                        Icons.mail
                    ),
                    label: const Text('Mail'))
              ],
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const SizedBox(width: 30),
                OutlinedButton(
                    onPressed:() {
                      showDialog(
                          context: context,
                          builder: (ctx)=> const AlertDialog(
                              title: Text('You clicked on the Download Button')
                          ));
                    },
                    child: const Text('Download')
                ),
                const SizedBox( width:20),
                OutlinedButton.icon(
                    onPressed: (){
                      showDialog(
                          context: context,
                          builder: (ctx)=> const AlertDialog(
                              title: Text('You clicked on the Download Button')
                          ));
                    },
                    icon: const Icon(
                        Icons.download
                    ),
                    label: const Text('Download'))
              ],
            )
          ],
        ),
      )
      , // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
